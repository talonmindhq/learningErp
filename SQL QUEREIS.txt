-- Create users table
CREATE TABLE IF NOT EXISTS erpdemo.users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL CHECK (role IN ('Admin', 'Teacher', 'Student')),
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP
);

-- Create classes table
CREATE TABLE IF NOT EXISTS erpdemo.classes (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  grade VARCHAR(20) NOT NULL,
  section VARCHAR(20),
  capacity INTEGER NOT NULL,
  academic_year VARCHAR(20) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create teachers table
CREATE TABLE IF NOT EXISTS erpdemo.teachers (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  employee_id VARCHAR(50) UNIQUE NOT NULL,
  qualification VARCHAR(255) NOT NULL,
  specialization VARCHAR(255),
  joining_date DATE NOT NULL,
  status VARCHAR(20) DEFAULT 'Active' CHECK (status IN ('Active', 'Inactive', 'On Leave')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create transport_routes table
CREATE TABLE IF NOT EXISTS erpdemo.transport_routes (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  distance DECIMAL(10, 2),
  fee DECIMAL(10, 2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create students table
CREATE TABLE IF NOT EXISTS erpdemo.students (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  admission_number VARCHAR(50) UNIQUE NOT NULL,
  class_id INTEGER REFERENCES classes(id),
  roll_number VARCHAR(20),
  date_of_birth DATE,
  gender VARCHAR(10) CHECK (gender IN ('Male', 'Female', 'Other')),
  address TEXT,
  phone VARCHAR(20),
  parent_name VARCHAR(200),
  parent_phone VARCHAR(20),
  parent_email VARCHAR(255),
  transport_route_id INTEGER REFERENCES transport_routes(id),
  grade VARCHAR(20) NOT NULL,
  status VARCHAR(20) DEFAULT 'Active' CHECK (status IN ('Active', 'Inactive', 'Graduated', 'Transferred')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create subjects table
CREATE TABLE IF NOT EXISTS erpdemo.subjects (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  code VARCHAR(20) UNIQUE NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create teacher_subjects table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS erpdemo.teacher_subjects (
  id SERIAL PRIMARY KEY,
  teacher_id INTEGER REFERENCES teachers(id) ON DELETE CASCADE,
  subject_id INTEGER REFERENCES subjects(id) ON DELETE CASCADE,
  class_id INTEGER REFERENCES classes(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (teacher_id, subject_id, class_id)
);

-- Create academic_terms table
CREATE TABLE IF NOT EXISTS erpdemo.academic_terms (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  academic_year VARCHAR(20) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create assessment_types table
CREATE TABLE IF NOT EXISTS erpdemo.assessment_types (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  weight DECIMAL(5, 2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create assessments table
CREATE TABLE IF NOT EXISTS erpdemo.assessments (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  assessment_type_id INTEGER REFERENCES assessment_types(id),
  subject_id INTEGER REFERENCES subjects(id),
  max_score INTEGER NOT NULL,
  weight DECIMAL(5, 2) NOT NULL,
  academic_term_id INTEGER REFERENCES academic_terms(id),
  grade VARCHAR(20) NOT NULL,
  date DATE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create grades table
CREATE TABLE IF NOT EXISTS erpdemo.grades (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  assessment_id INTEGER REFERENCES assessments(id) ON DELETE CASCADE,
  score DECIMAL(10, 2) NOT NULL,
  remarks TEXT,
  recorded_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (student_id, assessment_id)
);

-- Create attendance table
CREATE TABLE IF NOT EXISTS erpdemo.attendance (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  status VARCHAR(20) NOT NULL CHECK (status IN ('Present', 'Absent', 'Late', 'Excused')),
  remarks TEXT,
  recorded_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (student_id, date)
);

-- Create fees table
CREATE TABLE IF NOT EXISTS erpdemo.fees (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  fee_type VARCHAR(100) NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  due_date DATE NOT NULL,
  status VARCHAR(20) NOT NULL CHECK (status IN ('Paid', 'Pending', 'Overdue', 'Waived')),
  payment_date DATE,
  payment_method VARCHAR(50),
  transaction_id VARCHAR(100),
  remarks TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create helpdesk_tickets table
CREATE TABLE IF NOT EXISTS erpdemo.helpdesk_tickets (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  subject VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'Open' CHECK (status IN ('Open', 'In Progress', 'Resolved', 'Closed')),
  priority VARCHAR(20) NOT NULL DEFAULT 'Medium' CHECK (priority IN ('Low', 'Medium', 'High', 'Urgent')),
  assigned_to INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  resolved_at TIMESTAMP
);

-- Create helpdesk_comments table
CREATE TABLE IF NOT EXISTS erpdemo.helpdesk_comments (
  id SERIAL PRIMARY KEY,
  ticket_id INTEGER REFERENCES helpdesk_tickets(id) ON DELETE CASCADE,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  comment TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create transport_vehicles table
CREATE TABLE IF NOT EXISTS erpdemo.transport_vehicles (
  id SERIAL PRIMARY KEY,
  registration_number VARCHAR(50) UNIQUE NOT NULL,
  vehicle_type VARCHAR(50) NOT NULL,
  capacity INTEGER NOT NULL,
  driver_name VARCHAR(100) NOT NULL,
  driver_contact VARCHAR(20) NOT NULL,
  route_id INTEGER REFERENCES transport_routes(id),
  status VARCHAR(20) DEFAULT 'Active' CHECK (status IN ('Active', 'Maintenance', 'Inactive')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- Insert sample users (password is 'password123' hashed)
INSERT INTO erpdemo.users (email, password, role, first_name, last_name) VALUES
('admin@school.com', '$2a$10$xVqYLGUuJ9Hy/80Z1k9cN.eF8zfZS6m4TqeybPyb5dNxLzlYUKi0G', 'Admin', 'Admin', 'User'),
('teacher1@school.com', '$2a$10$xVqYLGUuJ9Hy/80Z1k9cN.eF8zfZS6m4TqeybPyb5dNxLzlYUKi0G', 'Teacher', 'John', 'Smith'),
('teacher2@school.com', '$2a$10$xVqYLGUuJ9Hy/80Z1k9cN.eF8zfZS6m4TqeybPyb5dNxLzlYUKi0G', 'Teacher', 'Jane', 'Doe'),
('student1@school.com', '$2a$10$xVqYLGUuJ9Hy/80Z1k9cN.eF8zfZS6m4TqeybPyb5dNxLzlYUKi0G', 'Student', 'Alice', 'Johnson'),
('student2@school.com', '$2a$10$xVqYLGUuJ9Hy/80Z1k9cN.eF8zfZS6m4TqeybPyb5dNxLzlYUKi0G', 'Student', 'Bob', 'Brown');

-- Insert sample classes
INSERT INTO erpdemo.classes (name, grade, section, capacity, academic_year) VALUES
('Class 1A', '1', 'A', 30, '2023-2024'),
('Class 2B', '2', 'B', 25, '2023-2024'),
('Class 3C', '3', 'C', 28, '2023-2024');

-- Insert sample transport routes
INSERT INTO erpdemo.transport_routes (name, description, distance, fee) VALUES
('North Route', 'Covers northern part of the city', 5.2, 500.00),
('South Route', 'Covers southern part of the city', 4.8, 450.00),
('East Route', 'Covers eastern part of the city', 6.0, 550.00);

-- Insert sample teachers
INSERT INTO erpdemo.teachers (user_id, employee_id, qualification, specialization, joining_date, status) VALUES
(2, 'EMP001', 'M.Ed', 'Mathematics', '2020-08-01', 'Active'),
(3, 'EMP002', 'B.Ed', 'Science', '2021-07-15', 'Active');

-- Insert sample students
INSERT INTO erpdemo.students (user_id, admission_number, class_id, roll_number, date_of_birth, gender, address, phone, parent_name, parent_phone, parent_email, transport_route_id, grade, status) VALUES
(4, 'ADM001', 1, '101', '2015-05-10', 'Female', '123 Main St', '1234567890', 'Mr. Johnson', '9876543210', 'parent1@example.com', 1, '1', 'Active'),
(5, 'ADM002', 2, '201', '2014-03-15', 'Male', '456 Oak Ave', '2345678901', 'Mrs. Brown', '8765432109', 'parent2@example.com', 2, '2', 'Active');

-- Insert sample subjects
INSERT INTO erpdemo.subjects (name, code, description) VALUES
('Mathematics', 'MATH101', 'Basic mathematics for primary school'),
('Science', 'SCI101', 'Introduction to science concepts'),
('English', 'ENG101', 'English language and literature');

-- Insert sample teacher-subject assignments
INSERT INTO erpdemo.teacher_subjects (teacher_id, subject_id, class_id) VALUES
(1, 1, 1), -- Teacher 1 teaches Math in Class 1A
(2, 2, 2); -- Teacher 2 teaches Science in Class 2B

-- Insert sample academic terms
INSERT INTO erpdemo.academic_terms (name, start_date, end_date, academic_year) VALUES
('Term 1', '2023-09-01', '2023-12-15', '2023-2024'),
('Term 2', '2024-01-10', '2024-03-30', '2023-2024'),
('Term 3', '2024-04-15', '2024-06-30', '2023-2024');

-- Insert sample assessment types
INSERT INTO erpdemo.assessment_types (name, description, weight) VALUES
('Quiz', 'Short assessment of understanding', 10.00),
('Mid-Term Exam', 'Assessment at the middle of the term', 30.00),
('Final Exam', 'Comprehensive assessment at the end of term', 50.00),
('Project', 'Practical application of knowledge', 20.00);

-- Insert sample assessments
INSERT INTO erpdemo.assessments (name, description, assessment_type_id, subject_id, max_score, weight, academic_term_id, grade, date) VALUES
('Math Quiz 1', 'First quiz on basic arithmetic', 1, 1, 20, 10.00, 1, '1', '2023-09-15'),
('Science Mid-Term', 'Mid-term exam covering chapters 1-5', 2, 2, 100, 30.00, 1, '2', '2023-10-20');

-- Insert sample grades
INSERT INTO erpdemo.grades (student_id, assessment_id, score, remarks, recorded_by) VALUES
(1, 1, 18.00, 'Excellent work', 2),
(2, 2, 85.00, 'Good understanding of concepts', 3);

-- Insert sample attendance records
INSERT INTO erpdemo.attendance (student_id, date, status, remarks, recorded_by) VALUES
(1, '2023-09-01', 'Present', NULL, 2),
(1, '2023-09-02', 'Present', NULL, 2),
(2, '2023-09-01', 'Present', NULL, 3),
(2, '2023-09-02', 'Absent', 'Sick leave', 3);

-- Insert sample fees
INSERT INTO erpdemo.fees (student_id, fee_type, amount, due_date, status, payment_date, payment_method, transaction_id, remarks) VALUES
(1, 'Tuition Fee', 5000.00, '2023-09-10', 'Paid', '2023-09-05', 'Bank Transfer', 'TXN123456', NULL),
(2, 'Tuition Fee', 5000.00, '2023-09-10', 'Pending', NULL, NULL, NULL, NULL),
(1, 'Transport Fee', 500.00, '2023-09-10', 'Paid', '2023-09-05', 'Bank Transfer', 'TXN123457', NULL);

-- Insert sample helpdesk tickets
INSERT INTO erpdemo.helpdesk_tickets (user_id, subject, description, status, priority, assigned_to) VALUES
(4, 'Login Issue', 'Unable to login to the student portal', 'Open', 'High', 1),
(3, 'Incorrect Grade', 'The grade for Science Mid-Term seems incorrect', 'In Progress', 'Medium', 1);

-- Insert sample helpdesk comments
INSERT INTO erpdemo.helpdesk_comments (ticket_id, user_id, comment) VALUES
(1, 1, 'Looking into this issue. Will update soon.'),
(2, 1, 'Checking the grade records and will update.');

-- Insert sample transport vehicles
INSERT INTO erpdemo.transport_vehicles (registration_number, vehicle_type, capacity, driver_name, driver_contact, route_id, status) VALUES
('BUS001', 'School Bus', 40, 'David Wilson', '1122334455', 1, 'Active'),
('BUS002', 'School Bus', 40, 'Michael Brown', '2233445566', 2, 'Active'),
('VAN001', 'Van', 15, 'Robert Davis', '3344556677', 3, 'Active');